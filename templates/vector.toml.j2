[sources.web]
type = "docker_logs"
docker_host = "unix:///var/run/docker.sock"
include_containers = [ "{{ docker_app_name }}" ]

[transforms.filter]
type = "remap"
inputs = [ "web" ]
source = """
del(.container_created_at)
del(.container_id)
del(.container_name)
del(.host)
del(.image)
del(.label)
del(.source_type)
del(.stream)
del(.timestamp)
"""

[transforms.remap]
type = "remap"
inputs = [ "filter" ]
source = """
parsed, err = parse_regex(.message, r'^\\[?(?P<timestamp>\\d+[-\\/]\\w+[-\\/]\\d+[ :]\\d+:\\d+:\\d+(?:,| \\+)\\d+)[:\\]]? (?P<message>.*)$')

if err != null {
    .timestamp = now()
} else {
    . |= parsed
    .timestamp =
        parse_timestamp(.timestamp, format: "%F %T,%3f") ??
        parse_timestamp(.timestamp, format: "%d/%h/%Y:%T %z") ??
        parse_timestamp!(.timestamp, format: "%F %T %z")
}

parsed, err = parse_regex(.message, r'^(?:\\[\\d+\\])? ?\\[?(?P<severity>DEBUG|INFO|WARN(?:ING)?|ERROR|CRIT(?:ICAL)?)(?:\\] |\\/| )(?P<message>.*)$')

if err == null {
    . |= parsed
}

parsed, err = parse_regex(.message, r'^(?P<process>MainProcess|Beat)\\] (?P<message>.*)$')

if err == null {
    . |= parsed
}

parsed, err = parse_regex(.message, r'^(?P<ip>(?:\\d{1,3}\\.){3}\\d{1,3}\\b|\\b(?:[0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}) - \\"(?P<message>.*)$')

if err == null {
    . |= parsed
    parsed, err = parse_regex(.message, r'^(?P<http_method>GET|POST|PUT|PATCH|DELETE) (?P<path>\\/[^ ]*)[^"]*" (?P<status_code>\\d+)[^"]*"(?P<agent>[^"]*)"$')
    if err == null {
        . |= parsed
        . |= {"message": ""}
    } else {
        parsed, err = parse_regex(.message, r'(?P<message>[^\\/]*)(?P<path>[^"]*)[^"]*"[^"]*"(?P<agent>[^"]*)')
        if err == null {
            . |= parsed
        }
    }
}
"""

[sinks.out]
type = "console"
inputs = [ "remap" ]
target = "stdout"

[sinks.out.encoding]
codec = "json"

[sinks.elasticsearch]
type = "elasticsearch"
mode = "bulk"
inputs = [ "remap" ]
endpoints = [ "http://{{ elasticsearch_host }}:{{ elasticsearch_port }}" ]

[sinks.elasticsearch.auth]
strategy = "basic"
user = "elastic"
password = "{{ elasticsearch_pass }}"

[sinks.elasticsearch.bulk]
index = "web_logs"
